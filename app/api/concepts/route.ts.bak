import { NextRequest, NextResponse } from 'next/server';
import { SNOWSTORM_API_BASE, BRANCH, CONCEPTS_PATH } from '@/app/config/api';

export async function GET(request: NextRequest) {
  try {
    // Get the search parameters from the request
    const searchParams = request.nextUrl.searchParams;
    
    // Create a new URLSearchParams object to build the backend URL
    const backendParams = new URLSearchParams();
    
    // Copy all parameters except ECL, which we'll handle specially
    searchParams.forEach((value, key) => {
      if (key !== 'ecl') {
        backendParams.append(key, value);
      }
    });
    
    // Get the ECL parameter and encode it properly for the backend
    // The ECL is often complex and may need special handling
    const ecl = searchParams.get('ecl');
    if (ecl) {
      // Since we're building the URL manually, we don't need to double-encode the ECL
      backendParams.append('ecl', ecl);
    }
    
    // Build the target URL for the backend API
    const targetUrl = `${SNOWSTORM_API_BASE}${CONCEPTS_PATH}/${BRANCH}/concepts?${backendParams.toString()}`;
    
    console.log('Proxying request to:', targetUrl);
    
    // Set up request options with carefully selected headers
    // Use a valid Accept-Language header
    const options = {
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Accept-Language': 'en-US,en;q=0.9'  // Set a valid Accept-Language value
      },
      method: 'GET'
    };
    
    // Make the request to the backend
    const response = await fetch(targetUrl, options);
    
    if (!response.ok) {
      console.error(`API proxy error: Status ${response.status}`);
      let errorText = "";
      try {
        errorText = await response.text();
        console.error("Error response:", errorText);
      } catch (e) {
        console.error("Could not read error response text");
      }
      
      return NextResponse.json(
        { error: `API error: ${response.status}`, message: errorText },
        { status: response.status }
      );
    }
    
    // Get the data from the response
    const data = await response.json();
    
    // Return the data
    return NextResponse.json(data);
  } catch (error) {
    console.error("Error proxying to concepts API:", error);
    return NextResponse.json(
      { error: "Failed to fetch from backend API", message: error instanceof Error ? error.message : String(error) },
      { status: 500 }
    );
  }
} 